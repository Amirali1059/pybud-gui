name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  release-build:
    name:  ${{ matrix.python-version }} ${{ matrix.platform.os }}-${{ matrix.platform.python-architecture }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      # If one platform fails, allow the rest to keep testing
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", pypy-3.9, pypy-3.10]
        platform: [
          { os: "macos-latest", python-architecture: "arm64", rust-target: "aarch64-apple-darwin" },
          { os: "ubuntu-latest", python-architecture: "x64", rust-target: "x86_64-unknown-linux-gnu" },
          { os: "windows-latest", python-architecture: "x64", rust-target: "x86_64-pc-windows-msvc" },
        ]
        include:
          # Just test one x86 Windows Python for simplicity
          - python-version: 3.12
            platform: { os: "windows-latest", python-architecture: "x86", rust-target: "i686-pc-windows-msvc" }
          # Just test one x64 macOS Python for simplicity
          - python-version: 3.12
            platform: { os: "macos-13", python-architecture: "x64", rust-target: "x86_64-apple-darwin" }
        exclude:
          # macOS arm doesn't have Python builds before 3.10
          - python-version: 3.9
            platform: { os: "macos-latest", python-architecture: "arm64", rust-target: "aarch64-apple-darwin" }

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.platform.python-architecture }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust-target }}

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools
          pip install setuptools-rust

      - name: Build package
        if: ${{ startsWith(matrix.platform.os, 'ubuntu')}}
        run: |
          pip wheel -e . -w wheel/ --no-deps
          pip install auditwheel patchelf
          auditwheel repair wheel/*.whl -w dist/ --plat manylinux_2_34_x86_64
      
      - name: Build package
        if: ${{ !startsWith(matrix.platform.os, 'ubuntu')}}
        run: pip wheel -e . -w dist/ --no-deps
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.python-version }}-${{ matrix.platform.os }}-${{ matrix.platform.python-architecture }}-release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    strategy:
      # If one platform fails, allow the rest to keep testing
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", pypy-3.9, pypy-3.10]
        platform: [
          { os: "macos-latest", python-architecture: "arm64", rust-target: "aarch64-apple-darwin" },
          { os: "ubuntu-latest", python-architecture: "x64", rust-target: "x86_64-unknown-linux-gnu" },
          { os: "windows-latest", python-architecture: "x64", rust-target: "x86_64-pc-windows-msvc" },
        ]
        include:
          # Just test one x86 Windows Python for simplicity
          - python-version: 3.12
            platform: { os: "windows-latest", python-architecture: "x86", rust-target: "i686-pc-windows-msvc" }
          # Just test one x64 macOS Python for simplicity
          - python-version: 3.12
            platform: { os: "macos-13", python-architecture: "x64", rust-target: "x86_64-apple-darwin" }
        exclude:
          # macOS arm doesn't have Python builds before 3.10
          - python-version: 3.9
            platform: { os: "macos-latest", python-architecture: "arm64", rust-target: "aarch64-apple-darwin" }

    needs:
      - release-build

    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    environment:
      name: pypi
      url: https://pypi.org/p/pybud-gui

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.python-version }}-${{ matrix.platform.os }}-${{ matrix.platform.python-architecture }}-release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
